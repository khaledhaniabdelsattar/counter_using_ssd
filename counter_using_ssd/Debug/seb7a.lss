
seb7a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001be4  00001c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  00001c80  2**0
                  ALLOC
  3 .stab         00001a34  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000145c  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000078f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000086a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000925f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_1>
       8:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_2>
       c:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ee       	ldi	r30, 0xE4	; 228
      78:	fb e1       	ldi	r31, 0x1B	; 27
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <main>
      8a:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ssd_init>:
 */

#include "ssd_interfacing.h"
void ssd_init()

{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	    DIO_cofigure_channel(PORTA, PIN4, output);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>
		DIO_cofigure_channel(PORTA, PIN5, output);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	65 e0       	ldi	r22, 0x05	; 5
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>
		DIO_cofigure_channel(PORTA, PIN6, output);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	66 e0       	ldi	r22, 0x06	; 6
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>
		DIO_cofigure_channel(PORTA, PIN7, output);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	67 e0       	ldi	r22, 0x07	; 7
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>
		DIO_cofigure_channel(PORTB, PIN1, output); //en1
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>
		DIO_cofigure_channel(PORTB, PIN2, output); //en2
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	62 e0       	ldi	r22, 0x02	; 2
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>
		DIO_cofigure_channel(PORTB, PIN3, output); //dip
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	63 e0       	ldi	r22, 0x03	; 3
     b8e:	41 e0       	ldi	r20, 0x01	; 1
     b90:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>

        DIO_write_output_channel(PORTA, PIN4, low);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	64 e0       	ldi	r22, 0x04	; 4
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
		DIO_write_output_channel(PORTA, PIN5, low);
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	65 e0       	ldi	r22, 0x05	; 5
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
		DIO_write_output_channel(PORTA, PIN6, low);
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	66 e0       	ldi	r22, 0x06	; 6
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
		DIO_write_output_channel(PORTA, PIN7, low);
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	67 e0       	ldi	r22, 0x07	; 7
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>

		DIO_write_output_channel(PORTB, PIN1, low); //en2
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
		DIO_write_output_channel(PORTB, PIN2, low); //en1
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
		DIO_write_output_channel(PORTB, PIN3, low);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	63 e0       	ldi	r22, 0x03	; 3
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <ssd_display>:

void ssd_display(u8 num)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	6f 97       	sbiw	r28, 0x1f	; 31
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	8f 8f       	std	Y+31, r24	; 0x1f

   if(num<100)
     bf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bf8:	84 36       	cpi	r24, 0x64	; 100
     bfa:	08 f0       	brcs	.+2      	; 0xbfe <ssd_display+0x1e>
     bfc:	13 c1       	rjmp	.+550    	; 0xe24 <ssd_display+0x244>
   {
	  u8 first_digit=(num%10)<<4;
     bfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c00:	9a e0       	ldi	r25, 0x0A	; 10
     c02:	69 2f       	mov	r22, r25
     c04:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__udivmodqi4>
     c08:	89 2f       	mov	r24, r25
     c0a:	82 95       	swap	r24
     c0c:	80 7f       	andi	r24, 0xF0	; 240
     c0e:	8e 8f       	std	Y+30, r24	; 0x1e
	  u8 second_digit=(num/10)<<4;
     c10:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c12:	9a e0       	ldi	r25, 0x0A	; 10
     c14:	69 2f       	mov	r22, r25
     c16:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__udivmodqi4>
     c1a:	82 95       	swap	r24
     c1c:	80 7f       	andi	r24, 0xF0	; 240
     c1e:	8d 8f       	std	Y+29, r24	; 0x1d


      //enable ssd1 and disable ssd2
	  DIO_write_output_channel(PORTB, PIN1, high); //en1
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
	  DIO_write_output_channel(PORTB, PIN2,low); //en2
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>


	  DIO_write_output_group_of_port(PORTA, 0xf0, first_digit);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	60 ef       	ldi	r22, 0xF0	; 240
     c38:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c3a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <DIO_write_output_group_of_port>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a0 e8       	ldi	r26, 0x80	; 128
     c44:	bf e3       	ldi	r27, 0x3F	; 63
     c46:	89 8f       	std	Y+25, r24	; 0x19
     c48:	9a 8f       	std	Y+26, r25	; 0x1a
     c4a:	ab 8f       	std	Y+27, r26	; 0x1b
     c4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4e:	69 8d       	ldd	r22, Y+25	; 0x19
     c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	4a e7       	ldi	r20, 0x7A	; 122
     c5c:	55 e4       	ldi	r21, 0x45	; 69
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	8d 8b       	std	Y+21, r24	; 0x15
     c68:	9e 8b       	std	Y+22, r25	; 0x16
     c6a:	af 8b       	std	Y+23, r26	; 0x17
     c6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c6e:	6d 89       	ldd	r22, Y+21	; 0x15
     c70:	7e 89       	ldd	r23, Y+22	; 0x16
     c72:	8f 89       	ldd	r24, Y+23	; 0x17
     c74:	98 8d       	ldd	r25, Y+24	; 0x18
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c82:	88 23       	and	r24, r24
     c84:	2c f4       	brge	.+10     	; 0xc90 <ssd_display+0xb0>
		__ticks = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9c 8b       	std	Y+20, r25	; 0x14
     c8c:	8b 8b       	std	Y+19, r24	; 0x13
     c8e:	3f c0       	rjmp	.+126    	; 0xd0e <ssd_display+0x12e>
	else if (__tmp > 65535)
     c90:	6d 89       	ldd	r22, Y+21	; 0x15
     c92:	7e 89       	ldd	r23, Y+22	; 0x16
     c94:	8f 89       	ldd	r24, Y+23	; 0x17
     c96:	98 8d       	ldd	r25, Y+24	; 0x18
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	57 e4       	ldi	r21, 0x47	; 71
     ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	4c f5       	brge	.+82     	; 0xcfa <ssd_display+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca8:	69 8d       	ldd	r22, Y+25	; 0x19
     caa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e2       	ldi	r20, 0x20	; 32
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	9c 8b       	std	Y+20, r25	; 0x14
     cce:	8b 8b       	std	Y+19, r24	; 0x13
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <ssd_display+0x110>
     cd2:	80 e9       	ldi	r24, 0x90	; 144
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	9a 8b       	std	Y+18, r25	; 0x12
     cd8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cda:	89 89       	ldd	r24, Y+17	; 0x11
     cdc:	9a 89       	ldd	r25, Y+18	; 0x12
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <ssd_display+0xfe>
     ce2:	9a 8b       	std	Y+18, r25	; 0x12
     ce4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	8b 89       	ldd	r24, Y+19	; 0x13
     ce8:	9c 89       	ldd	r25, Y+20	; 0x14
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	9c 8b       	std	Y+20, r25	; 0x14
     cee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	8b 89       	ldd	r24, Y+19	; 0x13
     cf2:	9c 89       	ldd	r25, Y+20	; 0x14
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f7       	brne	.-38     	; 0xcd2 <ssd_display+0xf2>
     cf8:	14 c0       	rjmp	.+40     	; 0xd22 <ssd_display+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfa:	6d 89       	ldd	r22, Y+21	; 0x15
     cfc:	7e 89       	ldd	r23, Y+22	; 0x16
     cfe:	8f 89       	ldd	r24, Y+23	; 0x17
     d00:	98 8d       	ldd	r25, Y+24	; 0x18
     d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9c 8b       	std	Y+20, r25	; 0x14
     d0c:	8b 8b       	std	Y+19, r24	; 0x13
     d0e:	8b 89       	ldd	r24, Y+19	; 0x13
     d10:	9c 89       	ldd	r25, Y+20	; 0x14
     d12:	98 8b       	std	Y+16, r25	; 0x10
     d14:	8f 87       	std	Y+15, r24	; 0x0f
     d16:	8f 85       	ldd	r24, Y+15	; 0x0f
     d18:	98 89       	ldd	r25, Y+16	; 0x10
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <ssd_display+0x13a>
     d1e:	98 8b       	std	Y+16, r25	; 0x10
     d20:	8f 87       	std	Y+15, r24	; 0x0f
	  _delay_ms(1);


	  //enable ssd2 and disable ssd1
	      DIO_write_output_channel(PORTB, PIN1, low); //en1
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
	  	  DIO_write_output_channel(PORTB, PIN2,high); //en2
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	62 e0       	ldi	r22, 0x02	; 2
     d30:	41 e0       	ldi	r20, 0x01	; 1
     d32:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
          DIO_write_output_group_of_port(PORTA, 0xf0, second_digit);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	60 ef       	ldi	r22, 0xF0	; 240
     d3a:	4d 8d       	ldd	r20, Y+29	; 0x1d
     d3c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <DIO_write_output_group_of_port>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e8       	ldi	r26, 0x80	; 128
     d46:	bf e3       	ldi	r27, 0x3F	; 63
     d48:	8b 87       	std	Y+11, r24	; 0x0b
     d4a:	9c 87       	std	Y+12, r25	; 0x0c
     d4c:	ad 87       	std	Y+13, r26	; 0x0d
     d4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	6b 85       	ldd	r22, Y+11	; 0x0b
     d52:	7c 85       	ldd	r23, Y+12	; 0x0c
     d54:	8d 85       	ldd	r24, Y+13	; 0x0d
     d56:	9e 85       	ldd	r25, Y+14	; 0x0e
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a e7       	ldi	r20, 0x7A	; 122
     d5e:	55 e4       	ldi	r21, 0x45	; 69
     d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	8f 83       	std	Y+7, r24	; 0x07
     d6a:	98 87       	std	Y+8, r25	; 0x08
     d6c:	a9 87       	std	Y+9, r26	; 0x09
     d6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d70:	6f 81       	ldd	r22, Y+7	; 0x07
     d72:	78 85       	ldd	r23, Y+8	; 0x08
     d74:	89 85       	ldd	r24, Y+9	; 0x09
     d76:	9a 85       	ldd	r25, Y+10	; 0x0a
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d84:	88 23       	and	r24, r24
     d86:	2c f4       	brge	.+10     	; 0xd92 <ssd_display+0x1b2>
		__ticks = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9e 83       	std	Y+6, r25	; 0x06
     d8e:	8d 83       	std	Y+5, r24	; 0x05
     d90:	3f c0       	rjmp	.+126    	; 0xe10 <ssd_display+0x230>
	else if (__tmp > 65535)
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da6:	18 16       	cp	r1, r24
     da8:	4c f5       	brge	.+82     	; 0xdfc <ssd_display+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     daa:	6b 85       	ldd	r22, Y+11	; 0x0b
     dac:	7c 85       	ldd	r23, Y+12	; 0x0c
     dae:	8d 85       	ldd	r24, Y+13	; 0x0d
     db0:	9e 85       	ldd	r25, Y+14	; 0x0e
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <ssd_display+0x212>
     dd4:	80 e9       	ldi	r24, 0x90	; 144
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <ssd_display+0x200>
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f7       	brne	.-38     	; 0xdd4 <ssd_display+0x1f4>
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <ssd_display+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	9e 83       	std	Y+6, r25	; 0x06
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <ssd_display+0x23c>
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
	  	  _delay_ms(1);

	  }


}
     e24:	6f 96       	adiw	r28, 0x1f	; 31
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <ssd_display_with_delay>:



void ssd_display_with_delay (u8 num,u32 delay)

{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	67 97       	sbiw	r28, 0x17	; 23
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	8b 8b       	std	Y+19, r24	; 0x13
     e4c:	4c 8b       	std	Y+20, r20	; 0x14
     e4e:	5d 8b       	std	Y+21, r21	; 0x15
     e50:	6e 8b       	std	Y+22, r22	; 0x16
     e52:	7f 8b       	std	Y+23, r23	; 0x17

	u32 i=0;
     e54:	1f 86       	std	Y+15, r1	; 0x0f
     e56:	18 8a       	std	Y+16, r1	; 0x10
     e58:	19 8a       	std	Y+17, r1	; 0x11
     e5a:	1a 8a       	std	Y+18, r1	; 0x12

	for(i=0;i<delay;i+=3)
     e5c:	1f 86       	std	Y+15, r1	; 0x0f
     e5e:	18 8a       	std	Y+16, r1	; 0x10
     e60:	19 8a       	std	Y+17, r1	; 0x11
     e62:	1a 8a       	std	Y+18, r1	; 0x12
     e64:	80 c0       	rjmp	.+256    	; 0xf66 <ssd_display_with_delay+0x130>
	{

		ssd_display(num);
     e66:	8b 89       	ldd	r24, Y+19	; 0x13
     e68:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <ssd_display>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e8       	ldi	r26, 0x80	; 128
     e72:	bf e3       	ldi	r27, 0x3F	; 63
     e74:	8b 87       	std	Y+11, r24	; 0x0b
     e76:	9c 87       	std	Y+12, r25	; 0x0c
     e78:	ad 87       	std	Y+13, r26	; 0x0d
     e7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e80:	8d 85       	ldd	r24, Y+13	; 0x0d
     e82:	9e 85       	ldd	r25, Y+14	; 0x0e
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4a e7       	ldi	r20, 0x7A	; 122
     e8a:	55 e4       	ldi	r21, 0x45	; 69
     e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	8f 83       	std	Y+7, r24	; 0x07
     e96:	98 87       	std	Y+8, r25	; 0x08
     e98:	a9 87       	std	Y+9, r26	; 0x09
     e9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e9c:	6f 81       	ldd	r22, Y+7	; 0x07
     e9e:	78 85       	ldd	r23, Y+8	; 0x08
     ea0:	89 85       	ldd	r24, Y+9	; 0x09
     ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e8       	ldi	r20, 0x80	; 128
     eaa:	5f e3       	ldi	r21, 0x3F	; 63
     eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	2c f4       	brge	.+10     	; 0xebe <ssd_display_with_delay+0x88>
		__ticks = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <ssd_display_with_delay+0x106>
	else if (__tmp > 65535)
     ebe:	6f 81       	ldd	r22, Y+7	; 0x07
     ec0:	78 85       	ldd	r23, Y+8	; 0x08
     ec2:	89 85       	ldd	r24, Y+9	; 0x09
     ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	57 e4       	ldi	r21, 0x47	; 71
     ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	4c f5       	brge	.+82     	; 0xf28 <ssd_display_with_delay+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eda:	8d 85       	ldd	r24, Y+13	; 0x0d
     edc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e2       	ldi	r20, 0x20	; 32
     ee4:	51 e4       	ldi	r21, 0x41	; 65
     ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	0f c0       	rjmp	.+30     	; 0xf1e <ssd_display_with_delay+0xe8>
     f00:	80 e9       	ldi	r24, 0x90	; 144
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <ssd_display_with_delay+0xd6>
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	9e 81       	ldd	r25, Y+6	; 0x06
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	9e 81       	ldd	r25, Y+6	; 0x06
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f7       	brne	.-38     	; 0xf00 <ssd_display_with_delay+0xca>
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <ssd_display_with_delay+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f28:	6f 81       	ldd	r22, Y+7	; 0x07
     f2a:	78 85       	ldd	r23, Y+8	; 0x08
     f2c:	89 85       	ldd	r24, Y+9	; 0x09
     f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9e 83       	std	Y+6, r25	; 0x06
     f3a:	8d 83       	std	Y+5, r24	; 0x05
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <ssd_display_with_delay+0x112>
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01

{

	u32 i=0;

	for(i=0;i<delay;i+=3)
     f50:	8f 85       	ldd	r24, Y+15	; 0x0f
     f52:	98 89       	ldd	r25, Y+16	; 0x10
     f54:	a9 89       	ldd	r26, Y+17	; 0x11
     f56:	ba 89       	ldd	r27, Y+18	; 0x12
     f58:	03 96       	adiw	r24, 0x03	; 3
     f5a:	a1 1d       	adc	r26, r1
     f5c:	b1 1d       	adc	r27, r1
     f5e:	8f 87       	std	Y+15, r24	; 0x0f
     f60:	98 8b       	std	Y+16, r25	; 0x10
     f62:	a9 8b       	std	Y+17, r26	; 0x11
     f64:	ba 8b       	std	Y+18, r27	; 0x12
     f66:	2f 85       	ldd	r18, Y+15	; 0x0f
     f68:	38 89       	ldd	r19, Y+16	; 0x10
     f6a:	49 89       	ldd	r20, Y+17	; 0x11
     f6c:	5a 89       	ldd	r21, Y+18	; 0x12
     f6e:	8c 89       	ldd	r24, Y+20	; 0x14
     f70:	9d 89       	ldd	r25, Y+21	; 0x15
     f72:	ae 89       	ldd	r26, Y+22	; 0x16
     f74:	bf 89       	ldd	r27, Y+23	; 0x17
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	4a 07       	cpc	r20, r26
     f7c:	5b 07       	cpc	r21, r27
     f7e:	08 f4       	brcc	.+2      	; 0xf82 <ssd_display_with_delay+0x14c>
     f80:	72 cf       	rjmp	.-284    	; 0xe66 <ssd_display_with_delay+0x30>
		ssd_display(num);
		_delay_ms(1);

    }

}
     f82:	67 96       	adiw	r28, 0x17	; 23
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <enable_EXT_interrupt_channel>:
void(*ptr_int0)(void)=NULL;
void(*ptr_int1)(void)=NULL;
void(*ptr_int2)(void)=NULL;

void enable_EXT_interrupt_channel(EXT_interrupts_channel channel)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <enable_EXT_interrupt_channel+0x6>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	89 83       	std	Y+1, r24	; 0x01

	switch (channel)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3b 83       	std	Y+3, r19	; 0x03
     faa:	2a 83       	std	Y+2, r18	; 0x02
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	91 05       	cpc	r25, r1
     fb4:	89 f0       	breq	.+34     	; 0xfd8 <enable_EXT_interrupt_channel+0x44>
     fb6:	2a 81       	ldd	r18, Y+2	; 0x02
     fb8:	3b 81       	ldd	r19, Y+3	; 0x03
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	a1 f0       	breq	.+40     	; 0xfe8 <enable_EXT_interrupt_channel+0x54>
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	b9 f4       	brne	.+46     	; 0xff6 <enable_EXT_interrupt_channel+0x62>
	{

	case EXT_interrupt_INT0:

		SET_BIT(GICR__EX_interrupts_reg,6);
     fc8:	ab e5       	ldi	r26, 0x5B	; 91
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	eb e5       	ldi	r30, 0x5B	; 91
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	8c 93       	st	X, r24
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <enable_EXT_interrupt_channel+0x62>

		break;

	case EXT_interrupt_INT1:

			SET_BIT(GICR__EX_interrupts_reg,7);
     fd8:	ab e5       	ldi	r26, 0x5B	; 91
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e5       	ldi	r30, 0x5B	; 91
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 68       	ori	r24, 0x80	; 128
     fe4:	8c 93       	st	X, r24
     fe6:	07 c0       	rjmp	.+14     	; 0xff6 <enable_EXT_interrupt_channel+0x62>

			break;

	case EXT_interrupt_INT2:

			SET_BIT(GICR__EX_interrupts_reg,5);
     fe8:	ab e5       	ldi	r26, 0x5B	; 91
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	eb e5       	ldi	r30, 0x5B	; 91
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 62       	ori	r24, 0x20	; 32
     ff4:	8c 93       	st	X, r24

			break;

}

}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <disable_EXT_interrupt_channel>:



void disable_EXT_interrupt_channel(EXT_interrupts_channel channel)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <disable_EXT_interrupt_channel+0x6>
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01

	switch (channel)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3b 83       	std	Y+3, r19	; 0x03
    1018:	2a 83       	std	Y+2, r18	; 0x02
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	9b 81       	ldd	r25, Y+3	; 0x03
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	89 f0       	breq	.+34     	; 0x1046 <disable_EXT_interrupt_channel+0x44>
    1024:	2a 81       	ldd	r18, Y+2	; 0x02
    1026:	3b 81       	ldd	r19, Y+3	; 0x03
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	a1 f0       	breq	.+40     	; 0x1056 <disable_EXT_interrupt_channel+0x54>
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	9b 81       	ldd	r25, Y+3	; 0x03
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	b9 f4       	brne	.+46     	; 0x1064 <disable_EXT_interrupt_channel+0x62>
		{

		case EXT_interrupt_INT0:

			CLEAR_BIT(GICR__EX_interrupts_reg,6);
    1036:	ab e5       	ldi	r26, 0x5B	; 91
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	eb e5       	ldi	r30, 0x5B	; 91
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8f 7b       	andi	r24, 0xBF	; 191
    1042:	8c 93       	st	X, r24
    1044:	0f c0       	rjmp	.+30     	; 0x1064 <disable_EXT_interrupt_channel+0x62>

			break;

		case EXT_interrupt_INT1:

			CLEAR_BIT(GICR__EX_interrupts_reg,7);
    1046:	ab e5       	ldi	r26, 0x5B	; 91
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	eb e5       	ldi	r30, 0x5B	; 91
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 77       	andi	r24, 0x7F	; 127
    1052:	8c 93       	st	X, r24
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <disable_EXT_interrupt_channel+0x62>

				break;

		case EXT_interrupt_INT2:

			CLEAR_BIT(GICR__EX_interrupts_reg,5);
    1056:	ab e5       	ldi	r26, 0x5B	; 91
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	eb e5       	ldi	r30, 0x5B	; 91
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	8c 93       	st	X, r24

				break;

	}

}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <sellect_EXT_interrupt_channel_mode>:

void sellect_EXT_interrupt_channel_mode(EXT_interrupts_channel channel,EXT_interrupts_modes mode)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <sellect_EXT_interrupt_channel_mode+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	6a 83       	std	Y+2, r22	; 0x02

	if(channel==EXT_interrupt_INT0)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	88 23       	and	r24, r24
    1082:	41 f4       	brne	.+16     	; 0x1094 <sellect_EXT_interrupt_channel_mode+0x24>
	{

		MCUCR_EX_interrupts_reg=(MCUCR_EX_interrupts_reg)|(mode);
    1084:	a5 e5       	ldi	r26, 0x55	; 85
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e5 e5       	ldi	r30, 0x55	; 85
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	90 81       	ld	r25, Z
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	89 2b       	or	r24, r25
    1092:	8c 93       	st	X, r24

	}

	if(channel==EXT_interrupt_INT1)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	79 f4       	brne	.+30     	; 0x10b8 <sellect_EXT_interrupt_channel_mode+0x48>
		{

			MCUCR_EX_interrupts_reg=(MCUCR_EX_interrupts_reg)|(mode<<2);
    109a:	a5 e5       	ldi	r26, 0x55	; 85
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e5       	ldi	r30, 0x55	; 85
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	82 2b       	or	r24, r18
    10b6:	8c 93       	st	X, r24

		}


	if(channel==EXT_interrupt_INT2)
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	a1 f4       	brne	.+40     	; 0x10e6 <sellect_EXT_interrupt_channel_mode+0x76>
	{

		if(mode==rising_edge)
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	39 f4       	brne	.+14     	; 0x10d2 <sellect_EXT_interrupt_channel_mode+0x62>
		{

			CLEAR_BIT(MCUCSR_EX_interrupts_reg,6);
    10c4:	a4 e5       	ldi	r26, 0x54	; 84
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e4 e5       	ldi	r30, 0x54	; 84
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8f 7b       	andi	r24, 0xBF	; 191
    10d0:	8c 93       	st	X, r24

		}

		 if(mode==falling_edge)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	39 f4       	brne	.+14     	; 0x10e6 <sellect_EXT_interrupt_channel_mode+0x76>
				{

				   SET_BIT(MCUCSR_EX_interrupts_reg,6);
    10d8:	a4 e5       	ldi	r26, 0x54	; 84
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e4 e5       	ldi	r30, 0x54	; 84
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 64       	ori	r24, 0x40	; 64
    10e4:	8c 93       	st	X, r24
		 		 }


	}

}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <calling_interrupt0>:

void calling_interrupt0(void(*ptr_int)(void))
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <calling_interrupt0+0x6>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	89 83       	std	Y+1, r24	; 0x01


 if(ptr_int!=NULL)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	31 f0       	breq	.+12     	; 0x1112 <calling_interrupt0+0x22>
 {

	 ptr_int0=ptr_int;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	90 93 69 00 	sts	0x0069, r25
    110e:	80 93 68 00 	sts	0x0068, r24

 }

}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <calling_interrupt1>:
void calling_interrupt1(void(*ptr_int)(void))
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <calling_interrupt1+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01


 if(ptr_int!=NULL)
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	31 f0       	breq	.+12     	; 0x113e <calling_interrupt1+0x22>
 {

	 ptr_int1=ptr_int;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	90 93 6b 00 	sts	0x006B, r25
    113a:	80 93 6a 00 	sts	0x006A, r24

 }

}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <calling_interrupt2>:

void calling_interrupt2(void(*ptr_int)(void))
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <calling_interrupt2+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01

if(ptr_int!=NULL)
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	31 f0       	breq	.+12     	; 0x116a <calling_interrupt2+0x22>
 {

	 ptr_int2=ptr_int;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	90 93 6d 00 	sts	0x006D, r25
    1166:	80 93 6c 00 	sts	0x006C, r24

 }

}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <__vector_1>:
	ptr_int0();

}*/

void __vector_1 (void)
{
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62

	ptr_int0();
    119e:	e0 91 68 00 	lds	r30, 0x0068
    11a2:	f0 91 69 00 	lds	r31, 0x0069
    11a6:	09 95       	icall

}
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <__vector_2>:

ISR(INT1_vect)

{
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	2f 93       	push	r18
    11da:	3f 93       	push	r19
    11dc:	4f 93       	push	r20
    11de:	5f 93       	push	r21
    11e0:	6f 93       	push	r22
    11e2:	7f 93       	push	r23
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	af 93       	push	r26
    11ea:	bf 93       	push	r27
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62


	ptr_int1();
    11f8:	e0 91 6a 00 	lds	r30, 0x006A
    11fc:	f0 91 6b 00 	lds	r31, 0x006B
    1200:	09 95       	icall

}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_3>:

ISR(INT2_vect)

{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62

 ptr_int2();
    1252:	e0 91 6c 00 	lds	r30, 0x006C
    1256:	f0 91 6d 00 	lds	r31, 0x006D
    125a:	09 95       	icall

}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <enable_interrupts>:
 */

#include "interrupt_interfacing.h"

void enable_interrupts()
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62

SET_BIT(SRGE_REGISTER,7);
    128a:	af e5       	ldi	r26, 0x5F	; 95
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ef e5       	ldi	r30, 0x5F	; 95
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	8c 93       	st	X, r24
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <disable_interrupts>:

void disable_interrupts()
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62

CLEAR_BIT(SRGE_REGISTER,7);
    12a6:	af e5       	ldi	r26, 0x5F	; 95
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ef e5       	ldi	r30, 0x5F	; 95
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 77       	andi	r24, 0x7F	; 127
    12b2:	8c 93       	st	X, r24


}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <leds_configuration>:
#include "led_names.h"
#include "bitmath.h"
#include "led_cfg.h"

void leds_configuration ()
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    DIO_cofigure_channel(led0_port,led0_pin,output);//led0
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	62 e0       	ldi	r22, 0x02	; 2
    12c6:	41 e0       	ldi	r20, 0x01	; 1
    12c8:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>
    DIO_cofigure_channel(led1_port,led1_pin,output); //led1
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	67 e0       	ldi	r22, 0x07	; 7
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>
    DIO_cofigure_channel(led2_port,led2_pin,output); //led2
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	63 e0       	ldi	r22, 0x03	; 3
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_cofigure_channel>

#if( led0_cnnection==source)

    DIO_write_output_channel (led0_port,led0_pin,low);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>

#endif


#if( led1_cnnection==source)
    DIO_write_output_channel (led1_port,led1_pin,low);
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	67 e0       	ldi	r22, 0x07	; 7
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>

#endif

#if( led2_cnnection==source)

    DIO_write_output_channel (led2_port,led2_pin,low);
    12f4:	83 e0       	ldi	r24, 0x03	; 3
    12f6:	63 e0       	ldi	r22, 0x03	; 3
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>

    DIO_write_output_channel (led2_port,led2_pin,high);

#endif

}
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <led_on>:


void led_on(leds led)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <led_on+0x6>
    130a:	0f 92       	push	r0
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	89 83       	std	Y+1, r24	; 0x01

	switch(led)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3b 83       	std	Y+3, r19	; 0x03
    131a:	2a 83       	std	Y+2, r18	; 0x02
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	9b 81       	ldd	r25, Y+3	; 0x03
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	91 05       	cpc	r25, r1
    1324:	79 f0       	breq	.+30     	; 0x1344 <led_on+0x40>
    1326:	2a 81       	ldd	r18, Y+2	; 0x02
    1328:	3b 81       	ldd	r19, Y+3	; 0x03
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <led_on+0x4c>
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	9b 81       	ldd	r25, Y+3	; 0x03
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	89 f4       	brne	.+34     	; 0x135a <led_on+0x56>

	case led0:

#if( led0_cnnection==source)

		DIO_write_output_channel (led0_port,led0_pin,high); //led0
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
    1342:	0b c0       	rjmp	.+22     	; 0x135a <led_on+0x56>
		break;

case led1:

#if( led1_cnnection==source)
		DIO_write_output_channel (led1_port,led1_pin,high); //led1
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	67 e0       	ldi	r22, 0x07	; 7
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
    134e:	05 c0       	rjmp	.+10     	; 0x135a <led_on+0x56>


case led2:

#if( led2_cnnection==source)
		DIO_write_output_channel (led2_port,led2_pin,high);
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	63 e0       	ldi	r22, 0x03	; 3
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>

#endif
				 break;
	}

}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <led_off>:


void led_off(leds led)

{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <led_off+0x6>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	89 83       	std	Y+1, r24	; 0x01

	switch(led)
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3b 83       	std	Y+3, r19	; 0x03
    137c:	2a 83       	std	Y+2, r18	; 0x02
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	9b 81       	ldd	r25, Y+3	; 0x03
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	79 f0       	breq	.+30     	; 0x13a6 <led_off+0x40>
    1388:	2a 81       	ldd	r18, Y+2	; 0x02
    138a:	3b 81       	ldd	r19, Y+3	; 0x03
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	81 f0       	breq	.+32     	; 0x13b2 <led_off+0x4c>
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	89 f4       	brne	.+34     	; 0x13bc <led_off+0x56>
		{

case led0:

#if( led0_cnnection==source)
			 DIO_write_output_channel (led0_port,led0_pin,low); //led0
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
    13a4:	0b c0       	rjmp	.+22     	; 0x13bc <led_off+0x56>
			 break;

case led1:

#if( led1_cnnection==source)
			 DIO_write_output_channel (led1_port,led1_pin,low); //led1
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	67 e0       	ldi	r22, 0x07	; 7
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <led_off+0x56>
			break;

case led2:

#if( led2_cnnection==source)
			 DIO_write_output_channel (led2_port,led2_pin,low); //led2
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	63 e0       	ldi	r22, 0x03	; 3
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>
#endif
					 break;
		}


}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <toggle_led>:


void toggle_led (leds led)

{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <toggle_led+0x6>
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	89 83       	std	Y+1, r24	; 0x01


	switch(led)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3b 83       	std	Y+3, r19	; 0x03
    13de:	2a 83       	std	Y+2, r18	; 0x02
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	71 f0       	breq	.+28     	; 0x1406 <toggle_led+0x3e>
    13ea:	2a 81       	ldd	r18, Y+2	; 0x02
    13ec:	3b 81       	ldd	r19, Y+3	; 0x03
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	71 f0       	breq	.+28     	; 0x1410 <toggle_led+0x48>
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	71 f4       	brne	.+28     	; 0x1418 <toggle_led+0x50>
			{

			case led0:
				 DIO_flip_pin(led0_port,led0_pin); //led0
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	62 e0       	ldi	r22, 0x02	; 2
    1400:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_flip_pin>
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <toggle_led+0x50>
				 break;

			case led1:
				DIO_flip_pin(led1_port,led1_pin); //led1
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	67 e0       	ldi	r22, 0x07	; 7
    140a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_flip_pin>
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <toggle_led+0x50>
				break;

			case led2:
				DIO_flip_pin(led2_port,led2_pin); //led2
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	63 e0       	ldi	r22, 0x03	; 3
    1414:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_flip_pin>
						 break;
			}


}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DIO_cofigure_channel>:



void DIO_cofigure_channel ( DIO_port port,PIN_NUMBER pin,Pin_dirction dirction)

{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <DIO_cofigure_channel+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <DIO_cofigure_channel+0x8>
    142c:	0f 92       	push	r0
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	6a 83       	std	Y+2, r22	; 0x02
    1436:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3d 83       	std	Y+5, r19	; 0x05
    1440:	2c 83       	std	Y+4, r18	; 0x04
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <DIO_cofigure_channel+0x2a>
    144c:	46 c0       	rjmp	.+140    	; 0x14da <DIO_cofigure_channel+0xb6>
    144e:	2c 81       	ldd	r18, Y+4	; 0x04
    1450:	3d 81       	ldd	r19, Y+5	; 0x05
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <DIO_cofigure_channel+0x3e>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	71 f0       	breq	.+28     	; 0x147c <DIO_cofigure_channel+0x58>
    1460:	c7 c0       	rjmp	.+398    	; 0x15f0 <DIO_cofigure_channel+0x1cc>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <DIO_cofigure_channel+0x4a>
    146c:	65 c0       	rjmp	.+202    	; 0x1538 <DIO_cofigure_channel+0x114>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <DIO_cofigure_channel+0x56>
    1478:	8e c0       	rjmp	.+284    	; 0x1596 <DIO_cofigure_channel+0x172>
    147a:	ba c0       	rjmp	.+372    	; 0x15f0 <DIO_cofigure_channel+0x1cc>
	{
	case PORTA:

  if(dirction ==input)
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 23       	and	r24, r24
    1480:	a1 f4       	brne	.+40     	; 0x14aa <DIO_cofigure_channel+0x86>
  {
	  CLEAR_BIT(DIO_DDRA_REG,pin);
    1482:	aa e3       	ldi	r26, 0x3A	; 58
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ea e3       	ldi	r30, 0x3A	; 58
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_cofigure_channel+0x7c>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_cofigure_channel+0x78>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24

  }
 if (dirction == output)
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <DIO_cofigure_channel+0x8e>
    14b0:	9f c0       	rjmp	.+318    	; 0x15f0 <DIO_cofigure_channel+0x1cc>
  {
	 SET_BIT(DIO_DDRA_REG,pin);
    14b2:	aa e3       	ldi	r26, 0x3A	; 58
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ea e3       	ldi	r30, 0x3A	; 58
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_cofigure_channel+0xac>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_cofigure_channel+0xa8>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	8b c0       	rjmp	.+278    	; 0x15f0 <DIO_cofigure_channel+0x1cc>


  // portB

	case PORTB:
if(dirction ==input)
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	88 23       	and	r24, r24
    14de:	a1 f4       	brne	.+40     	; 0x1508 <DIO_cofigure_channel+0xe4>
  {
	  CLEAR_BIT(DIO_DDRB_REG,pin);
    14e0:	a7 e3       	ldi	r26, 0x37	; 55
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e7 e3       	ldi	r30, 0x37	; 55
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_cofigure_channel+0xda>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_cofigure_channel+0xd6>
    1502:	80 95       	com	r24
    1504:	84 23       	and	r24, r20
    1506:	8c 93       	st	X, r24

  }
 if (dirction == output)
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	09 f0       	breq	.+2      	; 0x1510 <DIO_cofigure_channel+0xec>
    150e:	70 c0       	rjmp	.+224    	; 0x15f0 <DIO_cofigure_channel+0x1cc>
  {
	 SET_BIT(DIO_DDRB_REG,pin);
    1510:	a7 e3       	ldi	r26, 0x37	; 55
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e7 e3       	ldi	r30, 0x37	; 55
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_cofigure_channel+0x10a>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_cofigure_channel+0x106>
    1532:	84 2b       	or	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	5c c0       	rjmp	.+184    	; 0x15f0 <DIO_cofigure_channel+0x1cc>

  // portC
	case PORTC:


    if(dirction ==input)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 23       	and	r24, r24
    153c:	a1 f4       	brne	.+40     	; 0x1566 <DIO_cofigure_channel+0x142>
    {
  	  CLEAR_BIT(DIO_DDRC_REG,pin);
    153e:	a4 e3       	ldi	r26, 0x34	; 52
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e4 e3       	ldi	r30, 0x34	; 52
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_cofigure_channel+0x138>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_cofigure_channel+0x134>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24

    }
   if (dirction == output)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	09 f0       	breq	.+2      	; 0x156e <DIO_cofigure_channel+0x14a>
    156c:	41 c0       	rjmp	.+130    	; 0x15f0 <DIO_cofigure_channel+0x1cc>
    {
  	 SET_BIT(DIO_DDRC_REG,pin);
    156e:	a4 e3       	ldi	r26, 0x34	; 52
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e4 e3       	ldi	r30, 0x34	; 52
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_cofigure_channel+0x168>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_cofigure_channel+0x164>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	2d c0       	rjmp	.+90     	; 0x15f0 <DIO_cofigure_channel+0x1cc>


    // portD
	case PORTD:

      if(dirction ==input)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 23       	and	r24, r24
    159a:	a1 f4       	brne	.+40     	; 0x15c4 <DIO_cofigure_channel+0x1a0>
      {
    	  CLEAR_BIT(DIO_DDRD_REG,pin);
    159c:	a1 e3       	ldi	r26, 0x31	; 49
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e1 e3       	ldi	r30, 0x31	; 49
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_cofigure_channel+0x196>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_cofigure_channel+0x192>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24

      }
     if (dirction == output)
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	99 f4       	brne	.+38     	; 0x15f0 <DIO_cofigure_channel+0x1cc>
      {
    	 SET_BIT(DIO_DDRD_REG,pin);
    15ca:	a1 e3       	ldi	r26, 0x31	; 49
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e1 e3       	ldi	r30, 0x31	; 49
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_cofigure_channel+0x1c4>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_cofigure_channel+0x1c0>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24

      }
    break;
	}
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <DIO_write_output_channel>:

void DIO_write_output_channel ( DIO_port port ,PIN_NUMBER pin,pin_level level)

{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <DIO_write_output_channel+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_write_output_channel+0x8>
    1608:	0f 92       	push	r0
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	6a 83       	std	Y+2, r22	; 0x02
    1612:	4b 83       	std	Y+3, r20	; 0x03

	switch(port)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3d 83       	std	Y+5, r19	; 0x05
    161c:	2c 83       	std	Y+4, r18	; 0x04
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <DIO_write_output_channel+0x2a>
    1628:	46 c0       	rjmp	.+140    	; 0x16b6 <DIO_write_output_channel+0xb6>
    162a:	2c 81       	ldd	r18, Y+4	; 0x04
    162c:	3d 81       	ldd	r19, Y+5	; 0x05
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <DIO_write_output_channel+0x3e>
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	71 f0       	breq	.+28     	; 0x1658 <DIO_write_output_channel+0x58>
    163c:	c7 c0       	rjmp	.+398    	; 0x17cc <DIO_write_output_channel+0x1cc>
    163e:	2c 81       	ldd	r18, Y+4	; 0x04
    1640:	3d 81       	ldd	r19, Y+5	; 0x05
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <DIO_write_output_channel+0x4a>
    1648:	65 c0       	rjmp	.+202    	; 0x1714 <DIO_write_output_channel+0x114>
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	9d 81       	ldd	r25, Y+5	; 0x05
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	91 05       	cpc	r25, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <DIO_write_output_channel+0x56>
    1654:	8e c0       	rjmp	.+284    	; 0x1772 <DIO_write_output_channel+0x172>
    1656:	ba c0       	rjmp	.+372    	; 0x17cc <DIO_write_output_channel+0x1cc>
	{
	case PORTA:

	  if (level== low)
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 23       	and	r24, r24
    165c:	a1 f4       	brne	.+40     	; 0x1686 <DIO_write_output_channel+0x86>
	  {
		CLEAR_BIT(DIO_PORTA_REG,pin);
    165e:	ab e3       	ldi	r26, 0x3B	; 59
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	eb e3       	ldi	r30, 0x3B	; 59
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	48 2f       	mov	r20, r24
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 2e       	mov	r0, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_write_output_channel+0x7c>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	0a 94       	dec	r0
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_write_output_channel+0x78>
    1680:	80 95       	com	r24
    1682:	84 23       	and	r24, r20
    1684:	8c 93       	st	X, r24
	  }

	  if (level== high)
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	09 f0       	breq	.+2      	; 0x168e <DIO_write_output_channel+0x8e>
    168c:	9f c0       	rjmp	.+318    	; 0x17cc <DIO_write_output_channel+0x1cc>
	  	  {
	  		SET_BIT(DIO_PORTA_REG,pin);
    168e:	ab e3       	ldi	r26, 0x3B	; 59
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	eb e3       	ldi	r30, 0x3B	; 59
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_write_output_channel+0xac>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_write_output_channel+0xa8>
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
    16b4:	8b c0       	rjmp	.+278    	; 0x17cc <DIO_write_output_channel+0x1cc>


	  //portB
	case PORTB:

	  	  if (level== low)
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	88 23       	and	r24, r24
    16ba:	a1 f4       	brne	.+40     	; 0x16e4 <DIO_write_output_channel+0xe4>
	  	  {
	  		CLEAR_BIT(DIO_PORTB_REG,pin);
    16bc:	a8 e3       	ldi	r26, 0x38	; 56
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_write_output_channel+0xda>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_write_output_channel+0xd6>
    16de:	80 95       	com	r24
    16e0:	84 23       	and	r24, r20
    16e2:	8c 93       	st	X, r24
	  	  }

	  	  if (level== high)
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	09 f0       	breq	.+2      	; 0x16ec <DIO_write_output_channel+0xec>
    16ea:	70 c0       	rjmp	.+224    	; 0x17cc <DIO_write_output_channel+0x1cc>
	  	  	  {
	  	  		SET_BIT(DIO_PORTB_REG,pin);
    16ec:	a8 e3       	ldi	r26, 0x38	; 56
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e8 e3       	ldi	r30, 0x38	; 56
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <DIO_write_output_channel+0x10a>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <DIO_write_output_channel+0x106>
    170e:	84 2b       	or	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	5c c0       	rjmp	.+184    	; 0x17cc <DIO_write_output_channel+0x1cc>

    break;
	  	//portc
	case PORTC:

	  		  	  if (level== low)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	88 23       	and	r24, r24
    1718:	a1 f4       	brne	.+40     	; 0x1742 <DIO_write_output_channel+0x142>
	  		  	  {
	  		  		CLEAR_BIT(DIO_PORTC_REG,pin);
    171a:	a5 e3       	ldi	r26, 0x35	; 53
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e5 e3       	ldi	r30, 0x35	; 53
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_write_output_channel+0x138>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_write_output_channel+0x134>
    173c:	80 95       	com	r24
    173e:	84 23       	and	r24, r20
    1740:	8c 93       	st	X, r24
	  		  	  }

	  		  	  if (level== high)
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	09 f0       	breq	.+2      	; 0x174a <DIO_write_output_channel+0x14a>
    1748:	41 c0       	rjmp	.+130    	; 0x17cc <DIO_write_output_channel+0x1cc>
	  		  	  	  {
	  		  	  		SET_BIT(DIO_PORTC_REG,pin);
    174a:	a5 e3       	ldi	r26, 0x35	; 53
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e5 e3       	ldi	r30, 0x35	; 53
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_write_output_channel+0x168>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <DIO_write_output_channel+0x164>
    176c:	84 2b       	or	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	2d c0       	rjmp	.+90     	; 0x17cc <DIO_write_output_channel+0x1cc>

            break;
	  		 	//portD
	       case PORTD:

	  		  		  	  if (level== low)
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 23       	and	r24, r24
    1776:	a1 f4       	brne	.+40     	; 0x17a0 <DIO_write_output_channel+0x1a0>
	  		  		  	  {
	  		  		  		CLEAR_BIT(DIO_PORTD_REG,pin);
    1778:	a2 e3       	ldi	r26, 0x32	; 50
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e2 e3       	ldi	r30, 0x32	; 50
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_write_output_channel+0x196>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_write_output_channel+0x192>
    179a:	80 95       	com	r24
    179c:	84 23       	and	r24, r20
    179e:	8c 93       	st	X, r24
	  		  		  	  }

	  		  		  	  if (level== high)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	99 f4       	brne	.+38     	; 0x17cc <DIO_write_output_channel+0x1cc>
	  		  		  	  	  {
	  		  		  	  		SET_BIT(DIO_PORTD_REG,pin);
    17a6:	a2 e3       	ldi	r26, 0x32	; 50
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e2 e3       	ldi	r30, 0x32	; 50
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_write_output_channel+0x1c4>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_write_output_channel+0x1c0>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
	  		  		  break;
          }



}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <DIO_enable_pull_up>:


void DIO_enable_pull_up (DIO_port port,PIN_NUMBER pin)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <DIO_enable_pull_up+0x6>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	6a 83       	std	Y+2, r22	; 0x02



		DIO_write_output_channel(port,pin,high);
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	6a 81       	ldd	r22, Y+2	; 0x02
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_write_output_channel>

}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <DIO_write_output_group_of_port>:


void DIO_write_output_group_of_port (DIO_port port,u8 mask,u8 data)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <DIO_write_output_group_of_port+0x6>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <DIO_write_output_group_of_port+0x8>
    1806:	0f 92       	push	r0
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	6a 83       	std	Y+2, r22	; 0x02
    1810:	4b 83       	std	Y+3, r20	; 0x03

	switch (port)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3d 83       	std	Y+5, r19	; 0x05
    181a:	2c 83       	std	Y+4, r18	; 0x04
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	29 f1       	breq	.+74     	; 0x1870 <DIO_write_output_group_of_port+0x72>
    1826:	2c 81       	ldd	r18, Y+4	; 0x04
    1828:	3d 81       	ldd	r19, Y+5	; 0x05
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <DIO_write_output_group_of_port+0x3c>
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	61 f0       	breq	.+24     	; 0x1850 <DIO_write_output_group_of_port+0x52>
    1838:	4a c0       	rjmp	.+148    	; 0x18ce <DIO_write_output_group_of_port+0xd0>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	31 f1       	breq	.+76     	; 0x1890 <DIO_write_output_group_of_port+0x92>
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	89 f1       	breq	.+98     	; 0x18b0 <DIO_write_output_group_of_port+0xb2>
    184e:	3f c0       	rjmp	.+126    	; 0x18ce <DIO_write_output_group_of_port+0xd0>
	{
	case PORTA:

		DIO_PORTA_REG=(DIO_PORTA_REG&(~mask))|(data&mask);
    1850:	ab e3       	ldi	r26, 0x3B	; 59
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	eb e3       	ldi	r30, 0x3B	; 59
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	98 2f       	mov	r25, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	80 95       	com	r24
    1860:	29 2f       	mov	r18, r25
    1862:	28 23       	and	r18, r24
    1864:	9b 81       	ldd	r25, Y+3	; 0x03
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	89 23       	and	r24, r25
    186a:	82 2b       	or	r24, r18
    186c:	8c 93       	st	X, r24
    186e:	2f c0       	rjmp	.+94     	; 0x18ce <DIO_write_output_group_of_port+0xd0>

		  break;
	case PORTB:
		DIO_PORTB_REG=(DIO_PORTB_REG&(~mask))|(data&mask);
    1870:	a8 e3       	ldi	r26, 0x38	; 56
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e8 e3       	ldi	r30, 0x38	; 56
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	98 2f       	mov	r25, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	80 95       	com	r24
    1880:	29 2f       	mov	r18, r25
    1882:	28 23       	and	r18, r24
    1884:	9b 81       	ldd	r25, Y+3	; 0x03
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	89 23       	and	r24, r25
    188a:	82 2b       	or	r24, r18
    188c:	8c 93       	st	X, r24
    188e:	1f c0       	rjmp	.+62     	; 0x18ce <DIO_write_output_group_of_port+0xd0>
	             break;
	case PORTC:
		DIO_PORTC_REG=(DIO_PORTC_REG&(~mask))|(data&mask);
    1890:	a5 e3       	ldi	r26, 0x35	; 53
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e5 e3       	ldi	r30, 0x35	; 53
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	98 2f       	mov	r25, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	80 95       	com	r24
    18a0:	29 2f       	mov	r18, r25
    18a2:	28 23       	and	r18, r24
    18a4:	9b 81       	ldd	r25, Y+3	; 0x03
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	89 23       	and	r24, r25
    18aa:	82 2b       	or	r24, r18
    18ac:	8c 93       	st	X, r24
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <DIO_write_output_group_of_port+0xd0>
	             break;
	case PORTD:
		DIO_PORTD_REG=(DIO_PORTD_REG&(~mask))|(data&mask);
    18b0:	a2 e3       	ldi	r26, 0x32	; 50
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e2 e3       	ldi	r30, 0x32	; 50
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	98 2f       	mov	r25, r24
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	80 95       	com	r24
    18c0:	29 2f       	mov	r18, r25
    18c2:	28 23       	and	r18, r24
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	89 23       	and	r24, r25
    18ca:	82 2b       	or	r24, r18
    18cc:	8c 93       	st	X, r24
	             break;
	}
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <DIO_recive_input_channel>:
pin_level DIO_recive_input_channel(DIO_port port,PIN_NUMBER pin)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <DIO_recive_input_channel+0x6>
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <DIO_recive_input_channel+0x8>
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <DIO_recive_input_channel+0xa>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	3d 83       	std	Y+5, r19	; 0x05
    18f8:	2c 83       	std	Y+4, r18	; 0x04
    18fa:	4c 81       	ldd	r20, Y+4	; 0x04
    18fc:	5d 81       	ldd	r21, Y+5	; 0x05
    18fe:	41 30       	cpi	r20, 0x01	; 1
    1900:	51 05       	cpc	r21, r1
    1902:	49 f1       	breq	.+82     	; 0x1956 <DIO_recive_input_channel+0x78>
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	82 30       	cpi	r24, 0x02	; 2
    190a:	91 05       	cpc	r25, r1
    190c:	34 f4       	brge	.+12     	; 0x191a <DIO_recive_input_channel+0x3c>
    190e:	2c 81       	ldd	r18, Y+4	; 0x04
    1910:	3d 81       	ldd	r19, Y+5	; 0x05
    1912:	21 15       	cp	r18, r1
    1914:	31 05       	cpc	r19, r1
    1916:	61 f0       	breq	.+24     	; 0x1930 <DIO_recive_input_channel+0x52>
    1918:	57 c0       	rjmp	.+174    	; 0x19c8 <DIO_recive_input_channel+0xea>
    191a:	4c 81       	ldd	r20, Y+4	; 0x04
    191c:	5d 81       	ldd	r21, Y+5	; 0x05
    191e:	42 30       	cpi	r20, 0x02	; 2
    1920:	51 05       	cpc	r21, r1
    1922:	61 f1       	breq	.+88     	; 0x197c <DIO_recive_input_channel+0x9e>
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	9d 81       	ldd	r25, Y+5	; 0x05
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	91 05       	cpc	r25, r1
    192c:	d1 f1       	breq	.+116    	; 0x19a2 <DIO_recive_input_channel+0xc4>
    192e:	4c c0       	rjmp	.+152    	; 0x19c8 <DIO_recive_input_channel+0xea>
	{

	case PORTA:

		return CHECK_BIT(DIO_PINA_REG,pin);
    1930:	e9 e3       	ldi	r30, 0x39	; 57
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a9 01       	movw	r20, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_recive_input_channel+0x6a>
    1944:	55 95       	asr	r21
    1946:	47 95       	ror	r20
    1948:	8a 95       	dec	r24
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_recive_input_channel+0x66>
    194c:	ca 01       	movw	r24, r20
    194e:	58 2f       	mov	r21, r24
    1950:	51 70       	andi	r21, 0x01	; 1
    1952:	5b 83       	std	Y+3, r21	; 0x03
    1954:	3a c0       	rjmp	.+116    	; 0x19ca <DIO_recive_input_channel+0xec>
		break;

	case PORTB:

		    return CHECK_BIT(DIO_PINB_REG,pin);
    1956:	e6 e3       	ldi	r30, 0x36	; 54
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a9 01       	movw	r20, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_recive_input_channel+0x90>
    196a:	55 95       	asr	r21
    196c:	47 95       	ror	r20
    196e:	8a 95       	dec	r24
    1970:	e2 f7       	brpl	.-8      	; 0x196a <DIO_recive_input_channel+0x8c>
    1972:	ca 01       	movw	r24, r20
    1974:	58 2f       	mov	r21, r24
    1976:	51 70       	andi	r21, 0x01	; 1
    1978:	5b 83       	std	Y+3, r21	; 0x03
    197a:	27 c0       	rjmp	.+78     	; 0x19ca <DIO_recive_input_channel+0xec>
			break;

	case PORTC:

			return CHECK_BIT(DIO_PINC_REG,pin);
    197c:	e3 e3       	ldi	r30, 0x33	; 51
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a9 01       	movw	r20, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_recive_input_channel+0xb6>
    1990:	55 95       	asr	r21
    1992:	47 95       	ror	r20
    1994:	8a 95       	dec	r24
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_recive_input_channel+0xb2>
    1998:	ca 01       	movw	r24, r20
    199a:	58 2f       	mov	r21, r24
    199c:	51 70       	andi	r21, 0x01	; 1
    199e:	5b 83       	std	Y+3, r21	; 0x03
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <DIO_recive_input_channel+0xec>
			break;

	case PORTD:

			return CHECK_BIT(DIO_PIND_REG,pin);
    19a2:	e0 e3       	ldi	r30, 0x30	; 48
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a9 01       	movw	r20, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <DIO_recive_input_channel+0xdc>
    19b6:	55 95       	asr	r21
    19b8:	47 95       	ror	r20
    19ba:	8a 95       	dec	r24
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <DIO_recive_input_channel+0xd8>
    19be:	ca 01       	movw	r24, r20
    19c0:	58 2f       	mov	r21, r24
    19c2:	51 70       	andi	r21, 0x01	; 1
    19c4:	5b 83       	std	Y+3, r21	; 0x03
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <DIO_recive_input_channel+0xec>
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_recive_input_channel+0xf0>
			break;

}
}
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	8e 83       	std	Y+6, r24	; 0x06
    19ce:	8e 81       	ldd	r24, Y+6	; 0x06
    19d0:	26 96       	adiw	r28, 0x06	; 6
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <DIO_flip_pin>:

void DIO_flip_pin ( DIO_port port,PIN_NUMBER pin)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <DIO_flip_pin+0x6>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <DIO_flip_pin+0x8>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	6a 83       	std	Y+2, r22	; 0x02


	switch(port)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	3c 83       	std	Y+4, r19	; 0x04
    19fa:	2b 83       	std	Y+3, r18	; 0x03
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	91 05       	cpc	r25, r1
    1a04:	49 f1       	breq	.+82     	; 0x1a58 <DIO_flip_pin+0x76>
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <DIO_flip_pin+0x38>
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	61 f0       	breq	.+24     	; 0x1a30 <DIO_flip_pin+0x4e>
    1a18:	5a c0       	rjmp	.+180    	; 0x1ace <DIO_flip_pin+0xec>
    1a1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1e:	22 30       	cpi	r18, 0x02	; 2
    1a20:	31 05       	cpc	r19, r1
    1a22:	71 f1       	breq	.+92     	; 0x1a80 <DIO_flip_pin+0x9e>
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	e9 f1       	breq	.+122    	; 0x1aa8 <DIO_flip_pin+0xc6>
    1a2e:	4f c0       	rjmp	.+158    	; 0x1ace <DIO_flip_pin+0xec>
		{
		case PORTA:
 TOGGLE_BIT(DIO_PORTA_REG,pin);
    1a30:	ab e3       	ldi	r26, 0x3B	; 59
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	eb e3       	ldi	r30, 0x3B	; 59
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_flip_pin+0x6c>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_flip_pin+0x68>
    1a52:	84 27       	eor	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	3b c0       	rjmp	.+118    	; 0x1ace <DIO_flip_pin+0xec>
		break;
 //portB
		case PORTB:

			 TOGGLE_BIT(DIO_PORTB_REG,pin);
    1a58:	a8 e3       	ldi	r26, 0x38	; 56
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e8 e3       	ldi	r30, 0x38	; 56
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <DIO_flip_pin+0x94>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <DIO_flip_pin+0x90>
    1a7a:	84 27       	eor	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <DIO_flip_pin+0xec>
	    break;
		  	//portc
		case PORTC:

			 TOGGLE_BIT(DIO_PORTC_REG,pin);
    1a80:	a5 e3       	ldi	r26, 0x35	; 53
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e3       	ldi	r30, 0x35	; 53
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_flip_pin+0xbc>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <DIO_flip_pin+0xb8>
    1aa2:	84 27       	eor	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	13 c0       	rjmp	.+38     	; 0x1ace <DIO_flip_pin+0xec>
	            break;
		  		 	//portD
		       case PORTD:
               TOGGLE_BIT(DIO_PORTD_REG,pin);
    1aa8:	a2 e3       	ldi	r26, 0x32	; 50
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e2 e3       	ldi	r30, 0x32	; 50
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_flip_pin+0xe4>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_flip_pin+0xe0>
    1aca:	84 27       	eor	r24, r20
    1acc:	8c 93       	st	X, r24
		  		  		  break;
	         }

}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <interupt0_function>:
#include <stdio.h>
#include "led_interface.h"

u8 counter=0;
void interupt0_function()
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	enable_interrupts();
    1ae4:	0e 94 41 09 	call	0x1282	; 0x1282 <enable_interrupts>
    1ae8:	ff cf       	rjmp	.-2      	; 0x1ae8 <interupt0_function+0xc>

00001aea <interupt1_function>:
counter=0;


}
void interupt1_function()
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	enable_interrupts();
    1af2:	0e 94 41 09 	call	0x1282	; 0x1282 <enable_interrupts>
toggle_led(led1);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <toggle_led>
	//_delay_ms(250);
counter++;
    1afc:	80 91 6e 00 	lds	r24, 0x006E
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	80 93 6e 00 	sts	0x006E, r24


}
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <main>:

void main()
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	0f 92       	push	r0
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
	calling_interrupt0(interupt0_function);
    1b16:	8e e6       	ldi	r24, 0x6E	; 110
    1b18:	9d e0       	ldi	r25, 0x0D	; 13
    1b1a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <calling_interrupt0>
	calling_interrupt1(interupt1_function);
    1b1e:	85 e7       	ldi	r24, 0x75	; 117
    1b20:	9d e0       	ldi	r25, 0x0D	; 13
    1b22:	0e 94 8e 08 	call	0x111c	; 0x111c <calling_interrupt1>
	enable_EXT_interrupt_channel(EXT_interrupt_INT0);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	0e 94 ca 07 	call	0xf94	; 0xf94 <enable_EXT_interrupt_channel>
	enable_EXT_interrupt_channel(EXT_interrupt_INT1);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	0e 94 ca 07 	call	0xf94	; 0xf94 <enable_EXT_interrupt_channel>
	sellect_EXT_interrupt_channel_mode(EXT_interrupt_INT0,falling_edge);
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	62 e0       	ldi	r22, 0x02	; 2
    1b36:	0e 94 38 08 	call	0x1070	; 0x1070 <sellect_EXT_interrupt_channel_mode>
	sellect_EXT_interrupt_channel_mode(EXT_interrupt_INT1,falling_edge);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	0e 94 38 08 	call	0x1070	; 0x1070 <sellect_EXT_interrupt_channel_mode>

	enable_interrupts();
    1b42:	0e 94 41 09 	call	0x1282	; 0x1282 <enable_interrupts>
	leds_configuration();
    1b46:	0e 94 5d 09 	call	0x12ba	; 0x12ba <leds_configuration>
ssd_init();
    1b4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <ssd_init>
u8 flag=0;
    1b4e:	19 82       	std	Y+1, r1	; 0x01
while(1)
{

//if(flag==0)
//{
ssd_display(counter);
    1b50:	80 91 6e 00 	lds	r24, 0x006E
    1b54:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <ssd_display>
    1b58:	fb cf       	rjmp	.-10     	; 0x1b50 <main+0x44>

00001b5a <__udivmodqi4>:
    1b5a:	99 1b       	sub	r25, r25
    1b5c:	79 e0       	ldi	r23, 0x09	; 9
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <__udivmodqi4_ep>

00001b60 <__udivmodqi4_loop>:
    1b60:	99 1f       	adc	r25, r25
    1b62:	96 17       	cp	r25, r22
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <__udivmodqi4_ep>
    1b66:	96 1b       	sub	r25, r22

00001b68 <__udivmodqi4_ep>:
    1b68:	88 1f       	adc	r24, r24
    1b6a:	7a 95       	dec	r23
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <__udivmodqi4_loop>
    1b6e:	80 95       	com	r24
    1b70:	08 95       	ret

00001b72 <__prologue_saves__>:
    1b72:	2f 92       	push	r2
    1b74:	3f 92       	push	r3
    1b76:	4f 92       	push	r4
    1b78:	5f 92       	push	r5
    1b7a:	6f 92       	push	r6
    1b7c:	7f 92       	push	r7
    1b7e:	8f 92       	push	r8
    1b80:	9f 92       	push	r9
    1b82:	af 92       	push	r10
    1b84:	bf 92       	push	r11
    1b86:	cf 92       	push	r12
    1b88:	df 92       	push	r13
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	ca 1b       	sub	r28, r26
    1b9c:	db 0b       	sbc	r29, r27
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	09 94       	ijmp

00001baa <__epilogue_restores__>:
    1baa:	2a 88       	ldd	r2, Y+18	; 0x12
    1bac:	39 88       	ldd	r3, Y+17	; 0x11
    1bae:	48 88       	ldd	r4, Y+16	; 0x10
    1bb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bba:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bbc:	b9 84       	ldd	r11, Y+9	; 0x09
    1bbe:	c8 84       	ldd	r12, Y+8	; 0x08
    1bc0:	df 80       	ldd	r13, Y+7	; 0x07
    1bc2:	ee 80       	ldd	r14, Y+6	; 0x06
    1bc4:	fd 80       	ldd	r15, Y+5	; 0x05
    1bc6:	0c 81       	ldd	r16, Y+4	; 0x04
    1bc8:	1b 81       	ldd	r17, Y+3	; 0x03
    1bca:	aa 81       	ldd	r26, Y+2	; 0x02
    1bcc:	b9 81       	ldd	r27, Y+1	; 0x01
    1bce:	ce 0f       	add	r28, r30
    1bd0:	d1 1d       	adc	r29, r1
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	ed 01       	movw	r28, r26
    1bde:	08 95       	ret

00001be0 <_exit>:
    1be0:	f8 94       	cli

00001be2 <__stop_program>:
    1be2:	ff cf       	rjmp	.-2      	; 0x1be2 <__stop_program>
